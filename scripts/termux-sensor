#!/data/data/com.termux/files/usr/bin/sh
set -e

SCRIPTNAME=termux-sensor
show_usage () {
	echo "Usage: $SCRIPTNAME"
	echo "Get information about types of sensors as well as live data"
	echo "  -h, help           Show this help"
	echo "  -a, all            Listen to all sensors (WARNING! may have battery impact)"
	echo "  -c, cleanup        Perform cleanup (release sensor resources)"
	echo "  -l, list           Show list of available sensors"
	echo "  -s, sensors [,,,]  Sensors to listen to (can contain just partial name)"
	echo "  -d, delay [ms]     Delay time in milliseconds before receiving new sensor update"
	echo "  -n, limit [num]    Number of times to read sensor(s) (default: continuous) (min: 1)"
	exit 0
}

# ensure we properly release resources if needed on ^C
trap handle_interrupt  TERM INT

if [ $# -eq 0 ]; then
	echo "No arguments supplied!"
	show_usage
	exit 1;
fi

ARG_A=""
OPT_A=""
ARG_S=""
OPT_S=""
ARG_D=""
OPT_D=""
ARG_N=""
OPT_N=""

handle_interrupt () {
	echo "Caught interrupt.. Finishing..."
	cleanup
}

cleanup () {
	if [ -n "$ARG_A" ] || [ -n "$ARG_S" ]; then
		echo "Performing sensor cleanup"
		call_api -a cleanup
	else
		echo "No cleanup necessary"
	fi
}

get_sensors () {
	if [ $# -gt 1 ]; then
		usage_error "Sensor arg should be a comma delimited string!"
	fi
}

is_number () {
    case "$1" in
    ("" | *[!0-9]*)
        return 1
	esac
}

get_delay () {
	if [ $# -gt 1 ]; then
		usage_error "Too many arguments for -d delay"
	elif ! is_number "$1"; then
		usage_error "Illegal argument! -d delay arg should be a number!"
	fi
}

get_limit () {
	if [ $# -gt 1 ]; then
		usage_error "Too many arguments for -n limit"
	elif ! is_number "$1"; then
		usage_error "Illegal argument! -n limit arg should be a number!"
	fi
}

call_api () {
	/data/data/com.termux/files/usr/libexec/termux-api Sensor "$@"
	exit 0
}

usage_error () {
	echo "ERROR: $@"
	show_usage
	exit 1
}

sole() {
    if [ "$1 $2" != "-$option $OPTARG" ] || [ $# -gt 2 ]; then
        echo "ERROR: No other options should be specified with -$option!"
        usage_error
    fi
}


while getopts :h,a,c,l,s:d:n: option
do
	case "$option" in
		h) show_usage ;;
		a) ARG_A="--ez all"; OPT_A="true" ;;
		c) sole "$@"; call_api -a cleanup ;;
		l) sole "$@"; call_api -a list ;;
		s) get_sensors "$OPTARG"; ARG_S="--es sensors"; OPT_S="$OPTARG" ;;
		d) get_delay $OPTARG; ARG_D="--ei delay"; OPT_D="$OPTARG" ;;
		n) get_limit $OPTARG; ARG_N="--ei limit"; OPT_N="$OPTARG" ;;
		?) echo "$SCRIPTNAME: illegal option -$OPTARG"; exit 1;
	esac
done

# Validate options were set properly

if [ -n "$ARG_A" ] && [ -n "$ARG_S" ]; then
	usage_error "Listed sensors will be ignored with -a all option!"
elif [ -n "$ARG_D" ] && ! ([ -n "$ARG_A" ] || [ -n "$ARG_S" ]); then
	usage_error "Use -s <sensors> or -a option when using -d delay!"
fi

set --
if [ -n "$ARG_A" ]; then set -- "$@" $ARG_A "$OPT_A"; fi
if [ -n "$ARG_S" ]; then set -- "$@" $ARG_S "$OPT_S"; fi
if [ -n "$ARG_D" ]; then set -- "$@" $ARG_D "$OPT_D"; fi
if [ -n "$ARG_N" ]; then set -- "$@" $ARG_N "$OPT_N"; fi
set -- "$@" -a sensors

call_api "$@"
